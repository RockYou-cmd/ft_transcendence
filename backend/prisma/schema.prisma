// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String   @id @default(uuid())
  username                      String   @unique
  email                         String   @unique
  password                      String?
  photo                         String?
  bio                           String?
  is2faEnabled                  Boolean? @default(false)
  twoFactorAuthenticationSecret String?
  temp2fa                       String?
  friends                       Friend[] @relation(name: "FriendsToUsers")
  
  chats             Chat[]
  chatsMessages     Message[]

  rooms    RoomMembership[]
  rooomsMessages  RoomMessage[]
}

model Room {
  id        String      @id @default(uuid())
  name      String
  description String?
  privacy   RoomPrivacy @default(PUBLIC)
  password  String?
  members   RoomMembership[]
  messages  RoomMessage[]
  createdAt DateTime    @default(now())
}

model RoomMembership {
  id       Int        @id @default(autoincrement())
  user     User       @relation(fields: [userId], references: [username])
  userId   String
  room     Room       @relation(fields: [roomId], references: [id])
  roomId   String
  role     RoomRole @default(MEMBER)
  status   RoomStatus?
  mutedTime DateTime?


  @@unique([userId, roomId])
}

model RoomMessage {
  id        String     @id @default(uuid())
  content   String
  createdAt DateTime   @default(now())
  room      Room       @relation(fields: [roomId], references: [id])
  roomId    String
  sender    User       @relation(fields: [senderId], references: [username])
  senderId  String
}



model Chat {
  id        String    @id @default(uuid())
  messages  Message[]
  members   User[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  sender    User     @relation(fields: [senderId], references: [username])
  senderId  String
}

model Friend {
  id       Int @id @default(autoincrement())
  users    User[] @relation(name: "FriendsToUsers")
  status   Status @default(PENDING)
  friendId String
  userId   String

  @@unique([friendId, userId])
}

enum RoomRole {
  MEMBER
  ADMIN
  OWNER
}

enum RoomStatus {
  MUTED
  BANNED
}

enum RoomPrivacy {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum Status {
  PENDING
  WAITING
  ACCEPTED
  BlOCKED
  UNAVAILABLE
}
